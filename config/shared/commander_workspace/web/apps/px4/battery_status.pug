extends ../../common/layout

block header
        i.fa-fw.fa.fa-signal
        | PX4 - Battery Status

block main
    .row.row-fluid
      article.col-xs-10.col-sm-6.col-md-6.col-lg-6
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Voltage
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              #Voltage(style='width:100%; height:300px;')
              
      article.col-xs-10.col-sm-6.col-md-6.col-lg-6
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Current
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              #Current(style='width:100%; height:300px;')

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style='max-width:450px')
        #wid-SA.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Battery Status
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              .table-responsive
                table.table.table-condensed
                  tbody
                    tr
                      th Voltage:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_Voltage"}]}) ---
                    tr
                      th Voltage Filtered:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_VoltageFiltered"}]}) ---
                    tr
                      th Current:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_Current"}]}) ---
                    tr
                      th Current Filtered:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_CurrentFiltered"}]}) ---
                    tr
                      th Discharged:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_Discharged"}]}) ---
                    tr
                      th Remaining:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_Remaining"}]}) ---
                    tr
                      th Cell Count:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_CellCount"}]}) ---
                    tr
                      th Connected:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_Connected"}]}) ---
                    tr
                      th Warning:
                      td 
                        span(data-sage={tlm: [{name: "/CFS/PX4/BS_Warning"}]}) ---


      script.
        var MaxCount = 2500;
        var VData = [];
        var VFData = [];
        var CData = [];
        var CFData = [];
        
        $(function () {
          function legendFormatter(label, series) {
            return '<div ' + 
               'style="color:white;font-size:8pt;text-align:left;padding:4px;padding-left:10px">' +
               label + '</div>';
          };
    
          var VGraph = $.plot($("#Voltage"), [],{
              xaxis : {
                mode : 'time',
                font : {
                  color: "#ffffff"
                }
              },
              yaxis : {
                font : {
                  color: "#ffffff"
                }
              },
              series : {
                lines : {
                  show : true
                },
                points: {
                  show: false
                }
              },
              legend: {
                show: true,
                labelFormatter: legendFormatter,
                labelBoxBorderColor: 'rgba(255, 255, 255, 0.0)',
                noColumns: 1,
                position: 'ne',
                margin: [10,10],
                backgroundColor: null,
                backgroundOpacity: 0,
                container: null,
                sorted: false
              },
              grid: {
                show: true,
                //aboveData: boolean
                //color: '#ffffff',
                //backgroundColor: color/gradient or null
                //margin: number or margin object
                //labelMargin: number
                //axisMargin: number
                //markings: [{ color: "#ffffff" }],
                //markings: array of markings or (fn: axes -> array of markings)
                //borderWidth: number or object with "top", "right", "bottom" and "left" properties with different widths
                //borderColor: color or null or object with "top", "right", "bottom" and "left" properties with different colors
                //minBorderMargin: number or null
                //clickable: boolean
                //hoverable: boolean
                //autoHighlight: boolean
                //mouseActiveRadius: number
              }
            }
          );
        
          var MaxCount = 120;
          var ignoreCountV = 3;
          var updateInterval = 100;
          var countV = 0;
      
          session.subscribe({
            homogeneity: {tolerance: 0},
            tlm: [
              {name: '/CFS/PX4/BS_Voltage'},
              {name: '/CFS/PX4/BS_VoltageFiltered'},
            ]},function(params) {                
              countV = countV + 1;
              if(ignoreCountV > 0){
                ignoreCountV = ignoreCountV - 1;
              } else { 
                if (VData.length >= MaxCount) {
                  VData = VData.slice(1);
                  VFData = VFData.slice(1);
                }

                var timeStamp = new Date(params[0].acquisitionTime);
                var V = params[0].engValue.floatValue;
                var VF = params[1].engValue.floatValue;
                    
                VData.push([timeStamp, V]);
                VFData.push([timeStamp, VF]);
              }
          });

          function updateV() {
            VGraph.setData(
              [{
                data: VData,
                label: "Volts"
               },{
                data: VFData,
                label: "Volts (Filtered)"
               },
              ]);
        
            // since the axes don't change, we don't need to call plot.setupGrid()
            VGraph.setupGrid();
            VGraph.draw();
            setTimeout(updateV, updateInterval);
          }
                  
          updateV();
        });
        
        $(function () {
          function legendFormatter(label, series) {
            return '<div ' + 
               'style="color:white;font-size:8pt;text-align:left;padding:4px;padding-left:10px">' +
               label + '</div>';
          };
    
          var VGraph = $.plot($("#Current"), [],{
              xaxis : {
                mode : 'time',
                font : {
                  color: "#ffffff"
                }
              },
              yaxis : {
                font : {
                  color: "#ffffff"
                }
              },
              series : {
                lines : {
                  show : true
                },
                points: {
                  show: false
                }
              },
              legend: {
                show: true,
                labelFormatter: legendFormatter,
                labelBoxBorderColor: 'rgba(255, 255, 255, 0.0)',
                noColumns: 1,
                position: 'ne',
                margin: [10,10],
                backgroundColor: null,
                backgroundOpacity: 0,
                container: null,
                sorted: false
              },
              grid: {
                show: true,
                //aboveData: boolean
                //color: '#ffffff',
                //backgroundColor: color/gradient or null
                //margin: number or margin object
                //labelMargin: number
                //axisMargin: number
                //markings: [{ color: "#ffffff" }],
                //markings: array of markings or (fn: axes -> array of markings)
                //borderWidth: number or object with "top", "right", "bottom" and "left" properties with different widths
                //borderColor: color or null or object with "top", "right", "bottom" and "left" properties with different colors
                //minBorderMargin: number or null
                //clickable: boolean
                //hoverable: boolean
                //autoHighlight: boolean
                //mouseActiveRadius: number
              }
            }
          );
        
          var MaxCount = 120;
          var ignoreCountC = 3;
          var updateInterval = 100;
          var countC = 0;
      
          session.subscribe({
            homogeneity: {tolerance: 0},
            tlm: [
              {name: '/CFS/PX4/BS_Current'},
              {name: '/CFS/PX4/BS_CurrentFiltered'},
            ]},function(params) {                
              countC = countC + 1;
              if(ignoreCountC > 0){
                ignoreCountC = ignoreCountC - 1;
              } else { 
                if (CData.length >= MaxCount) {
                  CData = CData.slice(1);
                  CFData = CFData.slice(1);
                }

                var timeStamp = new Date(params[0].acquisitionTime);
                var C = params[0].engValue.floatValue;
                var CF = params[1].engValue.floatValue;
                    
                CData.push([timeStamp, C]);
                CFData.push([timeStamp, CF]);
              }
          });

          function updateC() {
            CGraph.setData(
              [{
                data: CData,
                label: "Amps"
               },{
                data: CFData,
                label: "Amps (Filtered)"
               },
              ]);
        
            // since the axes don't change, we don't need to call plot.setupGrid()
            CGraph.setupGrid();
            CGraph.draw();
            setTimeout(updateC, updateInterval);
          }
                  
          updateV();
        });



